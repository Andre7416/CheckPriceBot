import json
import asyncio
import copy
from aiogram import Bot, Dispatcher, executor, types
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from database import Database
from csparser import Parse
import buttons


API_TOKEN = 'put_your_token_here'
bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot, storage=MemoryStorage())
db = Database()


class Form(StatesGroup):
    url = State()
    delete_url = State()


def startup(file='your_data_file'):
    with open(file, 'r') as f:
        dt = json.load(f)
    return dt


async def save_data(dt, file='your_data_file'):
    while True:
        await asyncio.sleep(14400)
        data_check = copy.deepcopy(dt)
        with open(file, 'w') as f:
            json.dump(data_check, f)


data = startup()


async def check_prices(time=3600):
    while True:
        await asyncio.sleep(time)
        for user_id in db.get_subs():
            user_id = user_id[1]
            data_check = copy.deepcopy(data)
            for link, price in data_check.get(user_id, {}).items():
                await asyncio.sleep(2)
                parse = Parse(link)
                new_price = parse.get_price()
                word = '—É–≤–µ–ª–∏—á–∏–ª–∞—Å—å' if new_price > price else '—É–º–µ–Ω—å—à–∏–ª–∞—Å—å'
                delta = abs(price - new_price)
                if price != new_price and new_price != 1e12:
                    data[user_id][link] = new_price
                    await bot.send_message(user_id, f'–¶–µ–Ω–∞ –Ω–∞ —Ç–æ–≤–∞—Ä "{parse.get_info()}" {word} –Ω–∞ {delta} '
                                                    f'–∏ —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç {new_price}\n{link}')
                await asyncio.sleep(1)


@dp.message_handler(commands=['start'])
async def start(message: types.Message):
    await message.answer('–ü—Ä–∏–≤–µ—Ç!', reply_markup=buttons.main_menu)


@dp.message_handler(commands=['help'])
async def info(message: types.Message):
    await message.answer('''
–° –ø–æ–º–æ—â—å—é —ç—Ç–æ–≥–æ –±–æ—Ç–∞ —Ç—ã —Å–º–æ–∂–µ—à—å —Å–ª–µ–¥–∏—Ç—å –∑–∞ —Ü–µ–Ω–æ–π –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏—Ö —Ç–µ–±—è –≤–µ—â–µ–π!
üëâ–ò—Å–ø–æ–ª—å–∑—É–π "/subscribe", —á—Ç–æ–±—ã –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —Ä–∞—Å—Å—ã–ª–∫—É.
üëâ–î–æ–±–∞–≤–ª—è—Ç—å —Ç–æ–≤–∞—Ä—ã –º–æ–∂–Ω–æ —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã "/add".
üëâ–î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å–ø–∏—Å–∫–∞ –≤—Å–µ—Ö —Å–≤–æ–∏—Ö —Ç–æ–≤–∞—Ä–æ–≤ –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å "/list".
üëâ–ö–æ–º–∞–Ω–¥—ã "/clear" –∏ "/remove" –ø–æ–º–æ–≥—É—Ç —É–±–∏—Ä–∞—Ç—å –Ω–µ–Ω—É–∂–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã.
üëâ–ù–∞–ø–∏—à–∏ "/unsubscribe", –µ—Å–ª–∏ –±–æ–ª—å—à–µ –Ω–µ —Ö–æ—á–µ—à—å –ø–æ–ª—É—á–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è.''')


@dp.message_handler(commands=['subscribe'])
async def subscribe(message: types.Message):
    if not db.is_in_database(message.from_user.id):
        db.add_sub(message.from_user.id)
        await message.answer('–ü–æ–¥–ø–∏—Å–∫–∞ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∞')
    else:
        db.update_sub(message.from_user.id, True)
        await message.answer('–ü–æ–¥–ø–∏—Å–∫–∞ –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∞')


@dp.message_handler(commands=['unsubscribe'])
async def unsubscribe(message: types.Message):
    if not db.is_in_database(message.from_user.id):
        db.add_sub(message.from_user.id, status=False)
        await message.answer('–í–æ–∑–º–æ–∂–Ω–æ, —Å–Ω–∞—á–∞–ª–∞ —Å—Ç–æ–∏—Ç –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è')
    else:
        db.update_sub(message.from_user.id, False)
        await message.answer('–ü–æ–¥–ø–∏—Å–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞')


@dp.message_handler(commands=['add'])
async def add(message: types.Message):
    await Form.url.set()
    await message.answer('–ñ–¥—É —Å—Å—ã–ª–∫—É –Ω–∞ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π —Ç–æ–≤–∞—Ä —Å —Å–∞–π—Ç–∞ https://www.farfetch.com/ru –∏–ª–∏ '
                         'https://www.yoox.com/ru',
                         disable_web_page_preview=True)


@dp.message_handler(state=Form.url)
async def set_new_url(message: types.Message, state: FSMContext):
    user = str(message.from_user.id)
    url = message.text
    data[user] = data.get(user, dict())
    await asyncio.sleep(2)
    data[user][url] = Parse(url).get_price()
    await state.finish()
    await message.answer(f'–¢–æ–≤–∞—Ä —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω, –µ–≥–æ —Ç–µ–∫—É—â–∞—è —Ü–µ–Ω–∞ {data[user][url]}')


@dp.message_handler(commands=['clear'])
async def clear(message: types.Message):
    user_id = str(message.from_user.id)
    data.pop(user_id, 1)
    await message.answer('–ì–æ—Ç–æ–≤–æ. –û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!')


@dp.message_handler(commands=['remove'])
async def delete_one(message: types.Message):
    await Form.delete_url.set()
    await message.answer('–ñ–¥—É —Å—Å—ã–ª–∫—É –Ω–∞ —Ç–æ–≤–∞—Ä, –∫–æ—Ç–æ—Ä—ã–π –Ω—É–∂–Ω–æ —É–±—Ä–∞—Ç—å')


@dp.message_handler(state=Form.delete_url)
async def delete_url(message: types.Message, state: FSMContext):
    user = str(message.from_user.id)
    url = message.text
    data.get(user, {}).pop(url, 1)
    await state.finish()
    await message.answer('–¢–æ–≤–∞—Ä —É—Å–ø–µ—à–Ω–æ —É–±—Ä–∞–Ω')


@dp.message_handler(commands=['list'])
async def print_list(message: types.Message):
    user_id = str(message.from_user.id)
    data_check = copy.deepcopy(data)
    urls = data_check.get(user_id, {}).keys()
    output = ''
    for url in urls:
        parse = Parse(url)
        output += f'{parse.get_info()}\n{url}\n\n'
        await asyncio.sleep(2)
    output = output[:-2] if len(output) > 0 else '–°–ø–∏—Å–æ–∫ –ø—É—Å—Ç'
    await message.answer(output, disable_web_page_preview=True)


if __name__ == '__main__':
    loop = asyncio.get_event_loop()
    loop.create_task(check_prices())
    loop.create_task(save_data(data))
    executor.start_polling(dp, skip_updates=True, loop=loop, on_startup=print('–Ø —Ä–æ–¥–∏–ª—Å—è!'))
